"use strict";(self.webpackChunksofie_documentation=self.webpackChunksofie_documentation||[]).push([[1650],{5318:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return h}});var r=a(7378);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(a),h=n,f=u["".concat(p,".").concat(h)]||u[h]||c[h]||o;return a?r.createElement(f,i(i({ref:t},m),{},{components:a})):r.createElement(f,i({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8847:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var r=a(5773),n=a(808),o=(a(7378),a(5318)),i=["components"],s={description:"List of all repositories related to Sofie"},p="Applications & Libraries",l={unversionedId:"for-developers/libraries",id:"version-1.32.0/for-developers/libraries",isDocsHomePage:!1,title:"Applications & Libraries",description:"List of all repositories related to Sofie",source:"@site/versioned_docs/version-1.32.0/for-developers/libraries.md",sourceDirName:"for-developers",slug:"/for-developers/libraries",permalink:"/sofie-core/docs/1.32.0/for-developers/libraries",editUrl:"https://github.com/nrkno/sofie-core/edit/master/packages/documentation/versioned_docs/version-1.32.0/for-developers/libraries.md",tags:[],version:"1.32.0",frontMatter:{description:"List of all repositories related to Sofie"},sidebar:"version-1.32.0/forDevelopers",previous:{title:"For developers",permalink:"/sofie-core/docs/1.32.0/for-developers/intro"}},m=[{value:"Main Application",id:"main-application",children:[]},{value:"Gateways",id:"gateways",children:[]},{value:"Libraries",id:"libraries",children:[]},{value:"Other Sofie-related Repositories",id:"other-sofie-related-repositories",children:[]}],c={toc:m};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"applications--libraries"},"Applications & Libraries"),(0,o.kt)("h2",{id:"main-application"},"Main Application"),(0,o.kt)("p",null,"The Sofie TV Automation system consists of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nrkno/tv-automation-server-core"},(0,o.kt)("strong",{parentName:"a"},"Sofie Server Core"))," which is the core application that serves the web GUI and handles the core logic."),(0,o.kt)("h2",{id:"gateways"},"Gateways"),(0,o.kt)("p",null,"Together with the ",(0,o.kt)("em",{parentName:"p"},"Server Core")," there are several ",(0,o.kt)("em",{parentName:"p"},"gateways")," which are separate applications, but which connect to ",(0,o.kt)("em",{parentName:"p"},"Server Core")," and are managed from within the Core's web UI."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-input-gateway"},(0,o.kt)("strong",{parentName:"a"},"Input Gateway"))," ",(0,o.kt)("strong",{parentName:"li"},"(","Work in progress",")")," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-mos-gateway"},(0,o.kt)("strong",{parentName:"a"},"MOS Gateway"))," Connects Sofie to a newsroom system and ingests rundowns via the ",(0,o.kt)("a",{parentName:"li",href:"http://mosprotocol.com/"},"MOS protocol"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/SuperFlyTV/spreadsheet-gateway"},(0,o.kt)("strong",{parentName:"a"},"Spreadsheet Gateway"))," Connects Sofie to a Google-Drive folder and ingests rundowns from spreadsheets."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-playout-gateway"},(0,o.kt)("strong",{parentName:"a"},"Playout Gateway"))," Handles the playout from Sofie. Connects to and controls a multitude of devices, such as vision mixers, graphics, light controllers, audio mixers etc.."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-quantel-gateway"},(0,o.kt)("strong",{parentName:"a"},"Quantel Gateway"))," CORBA to REST gateway for Quantel/ISA playback. ")),(0,o.kt)("h2",{id:"libraries"},"Libraries"),(0,o.kt)("p",null,"There are a number of libraries used in the Sofie ecosystem:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-atem-connection"},(0,o.kt)("strong",{parentName:"a"},"ATEM Connection"))," Library for communicating with Blackmagic Design ATEM mixers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-atem-state"},(0,o.kt)("strong",{parentName:"a"},"ATEM State")),"  Used in TSR to tracks the state of ATEM:s and generate commands to control them."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/SuperFlyTV/casparcg-connection"},(0,o.kt)("strong",{parentName:"a"},"CasparCG Connection"))," developed by ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/SuperFlyTV"},(0,o.kt)("em",{parentName:"a"},"SuperFly.tv")))," Library to connect and interact with CasparCG Servers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/superflytv/casparcg-state"},(0,o.kt)("strong",{parentName:"a"},"CasparCG State"))," developed by ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/SuperFlyTV"},(0,o.kt)("em",{parentName:"a"},"SuperFly.tv")))," Used in TSR to tracks the state of CasparCG Servers and generate commands to control them."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-emberplus-connection"},(0,o.kt)("strong",{parentName:"a"},"Ember+ Connection"))," Library to communicate with ",(0,o.kt)("em",{parentName:"li"},"Ember+")," control protocol "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-hyperdeck-connection"},(0,o.kt)("strong",{parentName:"a"},"HyperDeck Connection"))," Library for connecting to Blackmagic Design Hyperdeck recorders."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-mos-connection/"},(0,o.kt)("strong",{parentName:"a"},"MOS Connection"))," A ",(0,o.kt)("a",{parentName:"li",href:"http://mosprotocol.com/"},(0,o.kt)("em",{parentName:"a"},"MOS protocol"))," library for acting as a MOS device and connecting to an newsroom control system."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-quantel-gateway-client"},(0,o.kt)("strong",{parentName:"a"},"Quantel Gateway Client"))," An interface that talks to the Quantel-Gateway application."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-server-core-integration"},(0,o.kt)("strong",{parentName:"a"},"Server Core Integration"))," Used to connect to the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-server-core"},"Sofie Server Core")," by the Gateways."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-sofie-blueprints-integration"},(0,o.kt)("strong",{parentName:"a"},"Sofie Blueprints Integration"))," Common types and interfaces used by both Sofie Server Core and the user-defined blueprints."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/SuperFlyTV/supertimeline"},(0,o.kt)("strong",{parentName:"a"},"SuperFly-Timeline"))," developed by ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/SuperFlyTV"},(0,o.kt)("em",{parentName:"a"},"SuperFly.tv")))," Resolver and rules for placing objects on a virtual timeline."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nytamin/threadedClass"},(0,o.kt)("strong",{parentName:"a"},"ThreadedClass")," ")," developed by ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/nytamin"},(0,o.kt)("em",{parentName:"a"},"Nytamin")))," Used in TSR to spawn device controllers in separate processes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-state-timeline-resolver"},(0,o.kt)("strong",{parentName:"a"},"Timeline State Resolver"))," ","(","TSR",")"," The main driver in ",(0,o.kt)("strong",{parentName:"li"},"Playout Gateway,")," handles connections to playout-devices and sends commands based on a ",(0,o.kt)("strong",{parentName:"li"},"Timeline")," received from ",(0,o.kt)("strong",{parentName:"li"},"Core"),".")),(0,o.kt)("p",null,"There are also a few typings-only libraries that define interfaces between applications:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/tv-automation-sofie-blueprints-integration"},(0,o.kt)("strong",{parentName:"a"},"Blueprints integration"))," Defines the interface between ",(0,o.kt)("a",{parentName:"li",href:"../dictionary#blueprints"},(0,o.kt)("strong",{parentName:"a"},"Blueprints")," "),"and ",(0,o.kt)("a",{parentName:"li",href:"../dictionary#sofie-core"},(0,o.kt)("strong",{parentName:"a"},"Sofie Core")),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/timeline-state-resolver-types"},(0,o.kt)("strong",{parentName:"a"},"Timeline State Resolver types"))," Defines the interface between ",(0,o.kt)("a",{parentName:"li",href:"../dictionary#blueprints"},(0,o.kt)("strong",{parentName:"a"},"Blueprints"))," and the timeline that will be fed into ",(0,o.kt)("strong",{parentName:"li"},"TSR")," for playout.")),(0,o.kt)("h2",{id:"other-sofie-related-repositories"},"Other Sofie-related Repositories"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-casparcg-server"},(0,o.kt)("strong",{parentName:"a"},"CasparCG Server")," ","(","NRK fork",")")," Sofie-specific fork of CasparCG Server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-casparcg-launcher"},(0,o.kt)("strong",{parentName:"a"},"CasparCG Launcher"))," Launcher, controller, and logger for CasparCG Server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-casparcg-server"},(0,o.kt)("strong",{parentName:"a"},"CasparCG Media Scanner")," ","(","NRK fork",")")," Sofie-specific fork of CasparCG Server 2.2 Media Scanner."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-media-management"},(0,o.kt)("strong",{parentName:"a"},"Media Manager"))," Handles media transfer and media file management for pulling new files and deleting expired files on playout devices."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-quantel-browser-plugin"},(0,o.kt)("strong",{parentName:"a"},"Quantel Browser plugin"))," MOS-compatible Quantel video clip browser for use with Sofie."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/nrkno/tv-automation-sisyfos-audio-controller"},(0,o.kt)("strong",{parentName:"a"},"Sisyfos Audio Controller"))," developed by ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/olzzon/"},(0,o.kt)("em",{parentName:"a"},"olzzon"))))))}u.isMDXComponent=!0}}]);