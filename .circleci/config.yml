version: 2.1
jobs:
  build-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Npm install & build libs
          command: cd meteor && meteor npm install && meteor npm run ci:prepare
          no_output_timeout: 60m
      - run:
          name: Meteor Build
          command: cd meteor && NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
          no_output_timeout: 60m
      - run:
          name: Meteor Bundle NPM Build
          command: cd meteor/bundle/programs/server && npm install
          no_output_timeout: 60m
      - persist_to_workspace:
          root: .
          paths:
            - .

  test-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Npm install & build libs
          command: cd meteor && meteor npm install && meteor npm run ci:prepare
          no_output_timeout: 60m
      - run:
          name: Run tests and send coverage
          command: cd meteor && meteor npm run ci
          no_output_timeout: 60m
  lint-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Npm install & build libs
          command: cd meteor && meteor npm install && meteor npm run ci:prepare
          no_output_timeout: 60m
      - run:
          name: Typecheck and lint code
          command: cd meteor && meteor npm install && meteor npm run ci:lint
          no_output_timeout: 15m

  lint-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run: cd packages && yarn install
      - run:
          name: Run linter
          command: cd packages/<< parameters.lib-name >> && yarn lint
          no_output_timeout: 60m

  test-libs:
    parameters:
      lib-name:
        type: string
      node-version:
        type: string
    docker:
      - image: circleci/node:<< parameters.node-version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run: cd packages && yarn install
      - run:
          name: Run tests
          command: cd packages/<< parameters.lib-name >> && yarn unit
          no_output_timeout: 60m
      - when: 
          condition: << parameters.node-version >> == 12 # run for the 'main' version
          steps:
            - run:
                name: Send coverage
                command: cd packages/<< parameters.lib-name >> && yarn send-coverage

  validate-prod-dependencies-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run:
          name: Validate production dependencies
          command: |
            cd packages/<< parameters.lib-name >>
            if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
              yarn validate:dependencies
            else
              echo "Skipping audit"
            fi

  validate-all-dependencies-libs:
    parameters:
      lib-name:
        type: string
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    working_directory: ~/project
    steps:
      - checkout
      - run: 
          name: yarn install
          command: cd packages && yarn
      - run:
          name: Validate production dependencies
          command: cd packages/<< parameters.lib-name >> && yarn validate:dependencies
      - run:
          name: Validate dev dependencies
          command: cd packages/<< parameters.lib-name >> && yarn validate:dev-dependencies

  validate-prod-dependencies-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Npm install
          command: cd meteor && meteor npm install && meteor npm run postinstall
          no_output_timeout: 60m
      - run:
          name: Validate production dependencies for vulnerabilities and compatible licenses
          command: cd meteor && meteor npm run validate:prod-dependencies
          no_output_timeout: 15m
  validate-all-dependencies-core:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.11.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - run:
          name: Npm install
          command: cd meteor && meteor npm install && meteor npm run postinstall
          no_output_timeout: 60m
      - run:
          name: Validate all dependencies for vulnerabilities
          command: cd meteor && meteor npm run validate:all-dependencies
          no_output_timeout: 15m

  publish-tag:
    docker:
      - image: circleci/buildpack-deps:buster
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t server-core:$CIRCLE_TAG
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            if [ -z "$DOCKERHUB_IMAGE" ]; then
              echo "Skipping"
            else
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_TAG $DOCKERHUB_IMAGE:$CIRCLE_TAG
              docker push $DOCKERHUB_IMAGE:$CIRCLE_TAG
            fi
      - run:
          name: Publish Docker Image to Github Package Registry
          command: |
            if [ -z "$GITHUB_PASS" ]; then
              echo "Skipping"
            else
              echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
              docker tag server-core:$CIRCLE_TAG docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
              docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - validate-all-dependencies-core:
          filters:
            tags:
              only: /v.*/
      - validate-prod-dependencies-core:
          filters:
            tags:
              only: /v.*/
      - validate-all-dependencies-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
      - validate-prod-dependencies-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
      - build-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - lint-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - test-core:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/

      - test-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
              node-version:
                - '12' # Current target
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - lint-libs:
          matrix:
            parameters:
              lib-name:
                - blueprints-integration
                - server-core-integration
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/

      - publish-tag:
          requires:
            - test-core
            - test-libs
            - validate-prod-dependencies-core
            - validate-prod-dependencies-libs
            - build-core
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
